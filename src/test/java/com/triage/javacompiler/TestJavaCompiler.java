/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.triage.javacompiler;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaFileObject;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 * Tests out using native embedded java compiler
 * @author dcowden
 */
public class TestJavaCompiler {
    
    @Test
    public void testSimpleCompile() throws Exception{
        String TEST_SOURCE = "public class TestClass{" + "\n" +
                "   public String testMethod(){" + "\n" +
                "         return \"HAHAHA\"; " + "\n" +
                "   }"   + "\n" +
                "}" + "\n"; 
               
        CharSequenceCompiler compiler = new CharSequenceCompiler(getClass().getClassLoader(),new ArrayList<String>() );
        DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();
        Map<String,String> source = new HashMap<String,String>();
        source.put("TestClass",TEST_SOURCE);

        try{
            Map<String,CompileResult> resultMap = compiler.compile(source, diagnostics);
            CompileResult testClassResult = resultMap.get("TestClass");
            Class testClass = testClassResult.getCreatedClass();
            
            byte [] testByteCode = testClassResult.getByteCode();

            Object o = testClass.newInstance();
            Method m = o.getClass().getDeclaredMethod("testMethod");      

            //should return HAHAHA not baseStringValue 
            String resultText = (String)m.invoke(o, new Object[]{} );
            assertEquals(resultText,"HAHAHA");

            //write generated bytes
            FileOutputStream fos = new FileOutputStream( new File("TestDynamicCompiled.class"));
            fos.write(testByteCode);
            fos.close();               
            
        }
        catch ( CharSequenceCompilerException e ){
            System.err.println("Errors Compiling: ");
            DiagnosticCollector<JavaFileObject> dc = e.getDiagnostics();
            
            for ( Diagnostic d :dc.getDiagnostics()){
                System.err.println(d.toString());                
            }
            throw e;
        }
     
        
    }
}
